{"version":3,"file":"src_app_account_account_module_ts.js","mappings":"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","sources":["./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./src/app/account/auth/auth-routing.ts","./src/app/account/auth/auth.module.ts","./src/app/account/auth/login/login.component.ts","./src/app/account/auth/login/login.component.html","./src/app/account/auth/passwordreset/passwordreset.component.ts","./src/app/account/auth/passwordreset/passwordreset.component.html","./src/app/account/auth/signup/signup.component.ts","./src/app/account/auth/signup/signup.component.html"],"sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { AuthGuard } from \"../core/guards/auth.guard\";\n\nconst routes: Routes = [\n  {\n    path: \"auth\",\n    loadChildren: () => import(\"./auth/auth.module\").then((m) => m.AuthModule),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AccountRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { AuthModule } from './auth/auth.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    AuthModule\n  ]\n})\nexport class AccountModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { PasswordresetComponent } from './passwordreset/passwordreset.component';\n\nconst routes: Routes = [\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n    {\n        path: 'signup',\n        component: SignupComponent\n    },\n    {\n        path: 'reset-password',\n        component: PasswordresetComponent\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { AuthRoutingModule } from './auth-routing';\nimport { PasswordresetComponent } from './passwordreset/passwordreset.component';\n\n@NgModule({\n  declarations: [LoginComponent, SignupComponent, PasswordresetComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgbAlertModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { AuthenticationService } from '../../../core/services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\n\n/**\n * Login component\n */\nexport class LoginComponent implements OnInit, AfterViewInit {\n\n  loginForm: FormGroup;\n  submitted = false;\n  error = '';\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, private authenticationService: AuthenticationService) { }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    });\n\n    // reset login status\n    this.authenticationService.logout();\n  }\n\n  ngAfterViewInit() {\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.loginForm.controls; }\n\n  /**\n   * Form submit\n   */\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.authenticationService.login(this.f.email.value, this.f.password.value).then((res: any) => {\n      this.router.navigate(['/default']);\n    })\n      .catch(error => {\n        this.error = error ? error : '';\n      });\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a href=\"/\" class=\"text-dark\"><i class=\"fas fa-home h2\"></i></a>\n</div>\n<div class=\"account-pages mt-5 mb-5\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card overflow-hidden\">\n          <div class=\"bg-soft-primary\">\n            <div class=\"row\">\n              <div class=\"col-7\">\n                <div class=\"text-primary p-4\">\n                  <h5 class=\"text-primary\">Welcome Back !</h5>\n                  <p>Sign in to continue to Skote.</p>\n                </div>\n              </div>\n              <div class=\"col-5 align-self-end\">\n                <img src=\"assets/images/profile-img.png\" alt=\"\" class=\"img-fluid\">\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body pt-0\">\n            <div>\n              <a href=\"/\">\n                <div class=\"avatar-md profile-user-wid mb-4\">\n                  <span class=\"avatar-title rounded-circle bg-light\">\n                    <img src=\"assets/images/logo.svg\" alt=\"\" class=\"rounded-circle\" height=\"34\">\n                  </span>\n                </div>\n              </a>\n            </div>\n            <div class=\"p-2\">\n              <form class=\"form-horizontal\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n\n                <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"email\">Email</label>\n\n                  <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n                  <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                    <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                  </div>\n                </div>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"password\">Password</label>\n\n                  <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"password\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" placeholder=\"Password\" />\n                  <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                  </div>\n                </div>\n\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\" class=\"custom-control-input\" id=\"customControlInline\">\n                  <label class=\"custom-control-label\" for=\"customControlInline\">Remember me</label>\n                </div>\n\n                <div class=\"mt-3\">\n                  <button class=\"btn btn-primary btn-block\" type=\"submit\">Log In</button>\n                </div>\n\n                <div class=\"mt-4 text-center\">\n                  <a routerLink=\"/account/reset-password\" class=\"text-muted\"><i class=\"mdi mdi-lock mr-1\"></i> Forgot\n                    your\n                    password?</a>\n                </div>\n              </form>\n            </div>\n\n          </div>\n        </div>\n        <div class=\"mt-5 text-center\">\n          <p>Don't have an account ? <a routerLink=\"/account/signup\" class=\"font-weight-medium text-primary\"> Signup\n              now\n            </a> </p>\n          <p>© {{year}} Skote. Crafted with <i class=\"mdi mdi-heart text-danger\"></i> by Themesbrand</p>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- end container -->\n</div>\n<!-- end page -->\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AuthenticationService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-passwordreset',\n  templateUrl: './passwordreset.component.html',\n  styleUrls: ['./passwordreset.component.scss']\n})\n\n/**\n * Reset-password component\n */\nexport class PasswordresetComponent implements OnInit, AfterViewInit {\n\n  resetForm: FormGroup;\n  submitted = false;\n  error = '';\n  success = '';\n  loading = false;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, private authenticationService: AuthenticationService) { }\n\n  ngOnInit() {\n\n    this.resetForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n  ngAfterViewInit() {\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.resetForm.controls; }\n\n  /**\n   * On submit form\n   */\n  onSubmit() {\n    this.success = '';\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.resetForm.invalid) {\n      return;\n    }\n\n    this.authenticationService.resetPassword(this.f.email.value)\n      .catch(error => {\n        this.error = error ? error : '';\n      });\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a href=\"/\" class=\"text-dark\"><i class=\"fas fa-home h2\"></i></a>\n</div>\n<div class=\"account-pages my-5 pt-sm-5\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card overflow-hidden\">\n          <div class=\"bg-soft-primary\">\n            <div class=\"row\">\n              <div class=\"col-7\">\n                <div class=\"text-primary p-4\">\n                  <h5 class=\"text-primary\"> Reset Password</h5>\n                  <p>Re-Password with Skote.</p>\n                </div>\n              </div>\n              <div class=\"col-5 align-self-end\">\n                <img src=\"assets/images/profile-img.png\" alt=\"\" class=\"img-fluid\">\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body pt-0\">\n            <div>\n              <a href=\"/\">\n                <div class=\"avatar-md profile-user-wid mb-4\">\n                  <span class=\"avatar-title rounded-circle bg-light\">\n                    <img src=\"assets/images/logo.svg\" alt=\"\" class=\"rounded-circle\" height=\"34\">\n                  </span>\n                </div>\n              </a>\n            </div>\n\n            <form class=\"needs-validation\" name=\"resetForm\" [formGroup]=\"resetForm\" (ngSubmit)=\"onSubmit()\" novalidate>\n\n              <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n\n              <div class=\"form-group mb-3\">\n                <label for=\"email\">Email</label>\n\n                <input type=\"email\" formControlName=\"email\" class=\"form-control\"\n                  [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" id=\"email\" placeholder=\"Email\" />\n\n                <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                  <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                  <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                </div>\n              </div>\n              <div class=\"form-group mb-0 row\">\n                <div class=\"col-12 text-right\">\n                  <button class=\"btn btn-primary w-md\" type=\"submit\">Reset</button>\n                </div>\n              </div>\n            </form>\n\n          </div> <!-- end card-body-->\n        </div>\n        <!-- end card -->\n        <div class=\"mt-5 text-center\">\n          <p>Remember It ? <a routerLink=\"/account/login\" class=\"font-weight-medium text-primary\"> Sign In here</a> </p>\n          <p>© {{year}} Skote. Crafted with <i class=\"mdi mdi-heart text-danger\"></i> by Themesbrand</p>\n        </div>\n\n      </div> <!-- end col -->\n    </div>\n    <!-- end row -->\n  </div>\n  <!-- end container -->\n</div>\n<!-- end page -->\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AuthenticationService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit, AfterViewInit {\n\n  signupForm: FormGroup;\n  submitted = false;\n  error = '';\n  successmsg = false;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, private authenticationService: AuthenticationService) { }\n\n  ngOnInit() {\n\n    this.signupForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    });\n  }\n\n  ngAfterViewInit() {\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.signupForm.controls; }\n\n  /**\n   * On submit form\n   */\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.signupForm.invalid) {\n      return;\n    }\n\n    this.authenticationService.register(this.f.email.value, this.f.password.value).then((res: any) => {\n      this.successmsg = true;\n      if (this.successmsg) {\n        this.router.navigate(['/default']);\n      }\n    })\n      .catch(error => {\n        this.error = error ? error : '';\n      });\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a href=\"/\" class=\"text-dark\"><i class=\"fas fa-home h2\"></i></a>\n</div>\n<div class=\"account-pages my-5 pt-sm-5\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card overflow-hidden\">\n          <div class=\"bg-soft-primary\">\n            <div class=\"row\">\n              <div class=\"col-7\">\n                <div class=\"text-primary p-4\">\n                  <h5 class=\"text-primary\">Free Register</h5>\n                  <p>Get your free Skote account now.</p>\n                </div>\n              </div>\n              <div class=\"col-5 align-self-end\">\n                <img src=\"assets/images/profile-img.png\" alt=\"\" class=\"img-fluid\">\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body pt-0\">\n            <div>\n              <a href=\"/\">\n                <div class=\"avatar-md profile-user-wid mb-4\">\n                  <span class=\"avatar-title rounded-circle bg-light\">\n                    <img src=\"assets/images/logo.svg\" alt=\"\" class=\"rounded-circle\" height=\"34\">\n                  </span>\n                </div>\n              </a>\n            </div>\n            <div class=\"p-2\">\n\n              <form class=\"form-horizontal\" name=\"signupForm\" [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\"\n                novalidate>\n\n                <ngb-alert type=\"success\" *ngIf=\"successmsg\" [dismissible]=\"false\">Registeration successfull.\n                </ngb-alert>\n\n                <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"name\">Username</label>\n\n                  <input type=\"text\" formControlName=\"name\" class=\"form-control\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\" id=\"name\" placeholder=\"Enter username\" />\n\n                  <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.name.errors.required\">Userame is required</div>\n                  </div>\n                </div>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"email\">Email</label>\n\n                  <input type=\"email\" formControlName=\"email\" class=\"form-control\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" id=\"email\" placeholder=\"Email\" />\n\n                  <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                    <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                  </div>\n                </div>\n\n                <div class=\"form-group\">\n                  <label for=\"password\">Password</label>\n\n                  <input type=\"password\" formControlName=\"password\" class=\"form-control\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" id=\"password\" placeholder=\"Password\" />\n\n                  <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                  </div>\n                </div>\n\n                <div class=\"mt-4\">\n                  <button class=\"btn btn-primary btn-block\" type=\"submit\">Register</button>\n                </div>\n                <div class=\"mt-4 text-center\">\n                  <p class=\"mb-0\">By registering you agree to the Skote <a href=\"javascript: void(0);\"\n                      class=\"text-primary\">Terms of\n                      Use</a></p>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n        <!-- end card -->\n\n        <div class=\"mt-5 text-center\">\n          <p>Already have an account ? <a routerLink=\"/account/login\" class=\"font-weight-medium text-primary\"> Login</a>\n          </p>\n          <p>© {{year}} Skote. Crafted with <i class=\"mdi mdi-heart text-danger\"></i> by Themesbrand</p>\n        </div>\n      </div> <!-- end col -->\n    </div>\n    <!-- end row -->\n  </div>\n  <!-- end container -->\n</div>\n<!-- end page -->\n"],"names":[],"sourceRoot":"webpack:///"}